default_platform(:ios)

before_all do
  ensure_bundle_exec
  ensure_git_status_clean
  skip_docs
  app_store_connect_api_key(
    key_id: "AX6GU8LT6K",
    issuer_id: "69a6de97-a91c-47e3-e053-5b8c7c11a4d1",
    key_filepath: "AuthKey_AX6GU8LT6K.p8",
    in_house: false,
  )
end

after_all do
  clean_build_artifacts
end

error do
  clean_build_artifacts
end

desc 'Build & upload to Testflight'
lane :tf do
  xcversion(version: "~> 12.4")
  gym(
    scheme: 'Kodi Remote',
    clean: true,
    output_directory: 'build',
    include_symbols: true,
    include_bitcode: true,
    export_method: 'app-store',
    xcargs: "CURRENT_PROJECT_VERSION=#{number_of_commits}",
  )

  # ignore commit messages that contain '[not app]'
  changelogLines = []
  lastTag = last_git_tag
  changelog_from_git_commits(
    between: [lastTag, 'HEAD'],
    pretty: '- %b (%s)',
    merge_commit_filtering: 'only_include_merges',
  ).each_line(chomp: true) { |l|
    changelogLines << l unless l.include?('[not app]')
  }
  Actions.lane_context[SharedValues::FL_CHANGELOG] = changelogLines.join("\n")

  testflight(
    distribute_external: true,
    groups: ['external testers'],
  )

  # create prerelease on Github
  next unless ENV['GITHUB_API_TOKEN']
  appProperties = get_info_plist_value(
    key: 'ApplicationProperties',
    path: "#{lane_context[SharedValues::XCODEBUILD_ARCHIVE]}/Info.plist",
  )

  betaSuffix = '-b'
  if (betaIndex = lastTag.rindex(betaSuffix))
    afterBetaIndex = betaIndex + betaSuffix.length
    lastBetaNumber = lastTag[afterBetaIndex, 3] # max number = 999
    newTag = lastTag[0, afterBetaIndex] + "#{lastBetaNumber.to_i + 1}"
  else
    newTag = appPropertiesHash['CFBundleShortVersionString'] + betaSuffix + '1'
  end

  createGithubRelease("Testflight #{appProperties['CFBundleVersion']}", newTag, is_prerelease: true)
  system 'git fetch --tags'
end

desc 'Submit to AppStore review'
lane :asc do |options|
  appVersion = options[:app_version]
  buildNumber = options[:build_number]
  appstore(
    app_version: appVersion,
    build_number: buildNumber,
    skip_binary_upload: true,
    skip_screenshots: true,
    force: true,
    submit_for_review: true,
    reject_if_possible: true,
    automatic_release: true,
    submission_information: {
      add_id_info_uses_idfa: false,
    },
    precheck_include_in_app_purchases: false,
  )

  # draft release on Github
  next unless ENV['GITHUB_API_TOKEN']
  releaseName = options[:release_name]
  releaseName ||= UI.input "Please enter Github release name: " if UI.interactive?
  releaseName = releaseName&.strip
  next if releaseName.nil? || releaseName.empty?

  unless appVersion && buildNumber
    app_store_build_number(live: false, version: appVersion)
    appVersion ||= lane_context[SharedValues::LATEST_VERSION]
    buildNumber ||= lane_context[SharedValues::LATEST_BUILD_NUMBER]
  end
  releaseNotes = File.read(File.join(FastlaneCore::FastlaneFolder.path, 'metadata/en-US/release_notes.txt'))
  createGithubRelease(releaseName, appVersion, "Build #{buildNumber}\n\n#{releaseNotes}", is_draft: true)
end


def createGithubRelease(name, tag, description = nil, is_draft: false, is_prerelease: false)
  ghRelease = set_github_release(
    repository_name: 'xbmc/Official-Kodi-Remote-iOS',
    tag_name: tag,
    name: name,
    description: description,
    is_draft: is_draft,
    is_prerelease: is_prerelease,
  )
  UI.message JSON.pretty_generate(ghRelease)
end
